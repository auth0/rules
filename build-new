#!/usr/bin/env node

const async = require('async');
const path = require('path');
const yargs = require('yargs');
const comments = require('parse-comments');
const decomment = require('decomment');
const fs = require('fs');
const glob = require('glob');
const _ = require('lodash');

const argv = yargs
  .option('allRules', {
    alias: 'a',
    default: false
  })
  .option('outputPath', {
    alias: 'o',
    default: __dirname + '/rules.json'
  })
  .argv;

const files = glob.sync(__dirname + '/src/rules/*.js');

async.map(files, function (file, callback) {

  fs.readFile(file, 'utf8', function (err, content) {
    if (err) return callback(err);

    const comment = comments(content, {trim: true})[0]

    let categories = ['default'];
    if(comment.category) {
      categories = Array.isArray(comment.category) ? comment.category : [comment.category]
    }
    
    const result = {
      id: path.basename(file).replace('.js', ''),
      title: comment.overview,
      categories: categories,
      description: comment.example,
      code: decomment(content)
    }
    
    if (!argv.allRules && !comment.gallery) {
      return callback();
    }

    callback(null, result);
  });
}, function (err, rules) {
  if (err) {
    console.log(err.stack);
    process.exit(1);
  }

  const expandedRules = _.chain(rules)
    .flatMap(rule =>
      _.map(rule.categories, category => _.assign(rule, {category: category}))
    )
    .groupBy(r => r.category)
    .map((value, key) => ({
      name: key,
      templates: _.map(value, r => _.omit(r, 'category'))
    }))
    .value();

  console.log('all good!');
  fs.writeFileSync(argv.outputPath, JSON.stringify(expandedRules, null, 2));
  process.exit(0);
});
